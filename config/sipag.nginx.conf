#nginx config
client_max_body_size 0;
upstream app_server {
    server unix:/run/gunicorn/gunicorn.sock fail_timeout=0;
}

server {
    server_name sipagapi.online;

    location / {

        try_files $uri @proxy_to_app;
    }

    location /ws {
        try_files $uri @proxy_to_ws;
    }

    location /celery {
        proxy_pass http://0.0.0.0:5550;
        proxy_redirect off;
    }


    location @proxy_to_app {
        include proxy_params;
        proxy_pass http://app_server;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
        proxy_redirect off;
        
    }

    location @proxy_to_ws {
        proxy_pass http://0.0.0.0:8001;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/sipagapi.online/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/sipagapi.online/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}

server {
    if ($host = sipagapi.online) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name sipagapi.online;
    return 404; # managed by Certbot


}